
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-strict-aliasing")

FIND_PACKAGE(Ruby REQUIRED)

EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print Config::CONFIG['vendorarchdir']" OUTPUT_VARIABLE RUBY_VENDOR_ARCH_DIR)

MESSAGE(STATUS "Ruby executable: ${RUBY_EXECUTABLE}")
MESSAGE(STATUS "Ruby vendor arch dir: ${RUBY_VENDOR_ARCH_DIR}")
MESSAGE(STATUS "Ruby include path: ${RUBY_INCLUDE_PATH}")

SET( SWIG_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/yui_wrap.cxx" )
SET( SWIG_INPUT "${CMAKE_CURRENT_SOURCE_DIR}/../yui.i" )

ADD_CUSTOM_COMMAND (
   OUTPUT  ${CMAKE_CURRENT_BINARY_DIR}/yui_wrap.cxx
   COMMAND ${CMAKE_COMMAND} -E echo_append "Creating wrapper code for ruby..."
   COMMAND ${SWIG_EXECUTABLE} -c++ -ruby -autorename -xmlout ${CMAKE_CURRENT_BINARY_DIR}/parse.xml -o ${SWIG_OUTPUT} -I${LIBYUI_INCLUDE_DIR} ${SWIG_INPUT}
   COMMAND ${CMAKE_COMMAND} -E echo "Done."
   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
   DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/../*.i
)

ADD_CUSTOM_TARGET( glue
   DEPENDS ${SWIG_OUTPUT}
)

ADD_LIBRARY( yui SHARED ${SWIG_OUTPUT} )
SET_TARGET_PROPERTIES( yui PROPERTIES PREFIX "" )
ADD_DEPENDENCIES( yui glue )

INCLUDE_DIRECTORIES( ${RUBY_INCLUDE_PATH} )
INCLUDE_DIRECTORIES( ${LIBYUI_INCLUDE_DIR} )
TARGET_LINK_LIBRARIES( yui ${LIBYUI_LIBRARY} )
TARGET_LINK_LIBRARIES( yui ${RUBY_LIBRARY} )

INSTALL(TARGETS yui LIBRARY DESTINATION ${RUBY_VENDOR_ARCH_DIR})

